#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <functional> // Para hash

using namespace std;

// Clase , campos{valor }
struct Paciente {
    string nombre;
    int edad;
    bool estado;
    string doctor;
    int nivelUrgencia;
    string dia;
    string hora;

    // Comparador para la prioridad en la cola
    bool operator<(const Paciente& other) const {
        if (nivelUrgencia == other.nivelUrgencia) { //metodo
            return hora > other.hora; // Comparar por hora (más temprano, mayor prioridad)
        }
        return nivelUrgencia > other.nivelUrgencia; // "nivel urgencia "(1 es más urgente)
    }
};

// Función hash para emparejar doctores
struct DoctorHash {
    size_t operator()(const string& doctor) const {
        hash<string> hasher;
        return hasher(doctor);
    }
};

class ColaDePrioridad {
private:
    priority_queue<Paciente> colaPacientes;
    unordered_map<string, int, DoctorHash> ocupacionDoctores;
    unordered_map<string, vector<Paciente>, DoctorHash> pacientesPorDoctor;
    vector<Paciente> listaAtendidos;

public:
    void cargarPacientes() {
        vector<Paciente> pacientes = {
            {"Pedro", 36, true, "Hernandez", 1, "25/11/2024", "14:00"},
            {"Mariana", 9, true, "Torres", 1, "25/11/2024", "16:00"},
            {"Carlos", 36, true, "Carvajal", 1, "25/11/2024", "08:00"},
            {"Daniela", 36, true, "Hernandez", 2, "25/11/2024", "14:00"},
            {"Luis", 18, true, "Torres", 2, "25/11/2024", "16:00"},
            {"Andrea", 29, true, "Carvajal", 2, "25/11/2024", "08:00"},
            {"Mauricio", 45, true, "Hernandez", 3, "25/11/2024", "12:00"},
            {"Roberto", 52, true, "Torres", 3, "25/11/2024", "14:00"},
            {"Jonathan", 25, true, "Torres", 3, "25/11/2024", "13:00"},
            {"Isabel", 19, true, "Carvajal", 3, "25/11/2024", "11:30"},
            {"Valeria", 31, true, "Hernandez", 2, "25/11/2024", "11:30"},
            {"Laura", 6, true, "Hernandez", 4, "25/11/2024", "11:00"},
            {"Ana", 33, true, "Torres", 4, "25/11/2024", "10:00"},
            {"Miguel", 50, true, "Carvajal", 4, "25/11/2024", "13:00"},
            {"Tomas", 36, true, "Hernandez", 5, "25/11/2024", "09:00"},
            {"Sara", 12, true, "Torres", 5, "25/11/2024", "09:30"},
            {"Carmen", 40, true, "Carvajal", 5, "25/11/2024", "14:00"}
        };

        for (const auto& paciente : pacientes) {
            colaPacientes.push(paciente);
            ocupacionDoctores[paciente.doctor]++;
            pacientesPorDoctor[paciente.doctor].push_back(paciente);
        }
    }

    void reasignarPacientes() {
        // Cambié el bucle de la línea 73
        for (auto it = ocupacionDoctores.begin(); it != ocupacionDoctores.end(); ++it) {
            const string& doctor = it->first;
            int ocupacion = it->second;

            if (ocupacion < 5) {
                cout << "El doctor " << doctor << " tiene menos de 5 pacientes. Reasignando...\n";

                for (auto& otroIt : ocupacionDoctores) {
                    const string& otroDoctor = otroIt.first;
                    int otraOcupacion = otroIt.second;

                    if (otroDoctor != doctor && otraOcupacion > 5) {
                        int pacientesMover = otraOcupacion - 5;
                        auto& pacientes = pacientesPorDoctor[otroDoctor];

                        for (int i = 0; i < pacientesMover; ++i) {
                            Paciente paciente = pacientes.back();
                            pacientes.pop_back();
                            paciente.doctor = doctor;
                            pacientesPorDoctor[doctor].push_back(paciente);
                            colaPacientes.push(paciente);
                            ocupacionDoctores[doctor]++;
                            ocupacionDoctores[otroDoctor]--;
                        }
                        break;
                    }
                }
            }
        }
    }

    void atenderPacientes() {
        int orden = 1;
        while (!colaPacientes.empty()) {
            // Verifiqué si la cola está vacía antes de acceder a su elemento
            if (!colaPacientes.empty()) {
                const Paciente paciente = colaPacientes.top();
                listaAtendidos.push_back(paciente);
                cout << "Atendido [" << orden++ << "]:\n"
                     << "  - Nombre: " << paciente.nombre << "\n"
                     << "  - Doctor: " << paciente.doctor << "\n"
                     << "  - Urgencia: " << paciente.nivelUrgencia << "\n"
                     << "  - Hora: " << paciente.hora << "\n"
                     << "----------------------------------\n";
                colaPacientes.pop();
            } else {
                cout << "No hay más pacientes en espera.\n";
            }
        }
    }

    void mostrarPacientesAtendidos() const {
        cout << "\nLista de pacientes atendidos:\n";
        cout << "==================================\n";
        for (const auto& paciente : listaAtendidos) {
            cout << "- Nombre: " << paciente.nombre
                 << " | Doctor: " << paciente.doctor
                 << " | Urgencia: " << paciente.nivelUrgencia
                 << " | Hora: " << paciente.hora << "\n";
        }
        cout << "==================================\n";
    }
};

int main() {
    ColaDePrioridad triage;

    try {
        // Cargar pacientes directamente
        triage.cargarPacientes();

        // Reasignar pacientes si es necesario
        triage.reasignarPacientes();

        // Atender pacientes
        cout << "\nAtención de pacientes:\n";
        cout << "==================================\n";
        triage.atenderPacientes();

        // Mostrar lista de pacientes atendidos
        triage.mostrarPacientesAtendidos();

    } catch (const exception& e) {
        cerr << "Error: " << e.what() << "\n";
    }

    return 0;
}
